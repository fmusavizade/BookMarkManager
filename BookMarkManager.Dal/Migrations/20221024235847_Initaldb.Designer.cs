// <auto-generated />
using System;
using BookMarkManager.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BookMarkManager.Dal.Migrations
{
    [DbContext(typeof(BookmarkManagerDataContext))]
    [Migration("20221024235847_Initaldb")]
    partial class Initaldb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseSerialColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BookMarkManager.Dal.BookMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FolderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updatedat")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("BookMarks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Createdat = new DateTime(2022, 10, 25, 2, 58, 47, 70, DateTimeKind.Local).AddTicks(1120),
                            FolderId = 1,
                            Name = "IKEA",
                            URL = "https://www.ikea.com/",
                            Updatedat = new DateTime(2022, 10, 25, 2, 58, 47, 70, DateTimeKind.Local).AddTicks(1902)
                        },
                        new
                        {
                            Id = 2,
                            Createdat = new DateTime(2022, 10, 25, 2, 58, 47, 70, DateTimeKind.Local).AddTicks(2957),
                            FolderId = 1,
                            Name = "Amazon",
                            URL = "https://www.amazon.de/",
                            Updatedat = new DateTime(2022, 10, 25, 2, 58, 47, 70, DateTimeKind.Local).AddTicks(2990)
                        },
                        new
                        {
                            Id = 3,
                            Createdat = new DateTime(2022, 10, 25, 2, 58, 47, 70, DateTimeKind.Local).AddTicks(3043),
                            FolderId = 2,
                            Name = "BBC",
                            URL = "https://www.bbc.co.uk/",
                            Updatedat = new DateTime(2022, 10, 25, 2, 58, 47, 70, DateTimeKind.Local).AddTicks(3057)
                        },
                        new
                        {
                            Id = 4,
                            Createdat = new DateTime(2022, 10, 25, 2, 58, 47, 70, DateTimeKind.Local).AddTicks(3102),
                            Name = "Wolt",
                            URL = "https://wolt.com/",
                            Updatedat = new DateTime(2022, 10, 25, 2, 58, 47, 70, DateTimeKind.Local).AddTicks(3115)
                        });
                });

            modelBuilder.Entity("BookMarkManager.Dal.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseSerialColumn();

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updatedat")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Createdat = new DateTime(2022, 10, 25, 2, 58, 47, 61, DateTimeKind.Local).AddTicks(9603),
                            Description = "This folder Contains Online Shops",
                            Name = "OnlineShops",
                            Updatedat = new DateTime(2022, 10, 25, 2, 58, 47, 67, DateTimeKind.Local).AddTicks(1840)
                        },
                        new
                        {
                            Id = 2,
                            Createdat = new DateTime(2022, 10, 25, 2, 58, 47, 69, DateTimeKind.Local).AddTicks(5489),
                            Description = "This folder Contains News",
                            Name = "NEWS",
                            Updatedat = new DateTime(2022, 10, 25, 2, 58, 47, 69, DateTimeKind.Local).AddTicks(5592)
                        });
                });

            modelBuilder.Entity("BookMarkManager.Dal.BookMark", b =>
                {
                    b.HasOne("BookMarkManager.Dal.Folder", "Folder")
                        .WithMany("BookMarks")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("BookMarkManager.Dal.Folder", b =>
                {
                    b.Navigation("BookMarks");
                });
#pragma warning restore 612, 618
        }
    }
}
